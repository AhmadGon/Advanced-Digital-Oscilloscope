// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2020 22:52:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BitRangeExtractor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BitRangeExtractor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] EndBit;
reg [22:0] InputToExtractFrom;
reg Main_CLK;
reg Module_Enable;
reg [7:0] StartBit;
// wires                                               
wire [7:0] Fraction_BCD;
wire Valid_Output;

// assign statements (if any)                          
BitRangeExtractor i1 (
// port map - connection between master ports and signals/registers   
	.EndBit(EndBit),
	.Fraction_BCD(Fraction_BCD),
	.InputToExtractFrom(InputToExtractFrom),
	.Main_CLK(Main_CLK),
	.Module_Enable(Module_Enable),
	.StartBit(StartBit),
	.Valid_Output(Valid_Output)
);
initial 
begin 
#500000 $finish;
end 

// Main_CLK
always
begin
	Main_CLK = 1'b0;
	Main_CLK = #5000 1'b1;
	#5000;
end 

// Module_Enable
initial
begin
	Module_Enable = 1'b0;
	Module_Enable = #90000 1'b1;
	Module_Enable = #230000 1'b0;
end 
// InputToExtractFrom[ 22 ]
initial
begin
	InputToExtractFrom[22] = 1'b0;
end 
// InputToExtractFrom[ 21 ]
initial
begin
	InputToExtractFrom[21] = 1'b1;
end 
// InputToExtractFrom[ 20 ]
initial
begin
	InputToExtractFrom[20] = 1'b1;
end 
// InputToExtractFrom[ 19 ]
initial
begin
	InputToExtractFrom[19] = 1'b1;
end 
// InputToExtractFrom[ 18 ]
initial
begin
	InputToExtractFrom[18] = 1'b0;
end 
// InputToExtractFrom[ 17 ]
initial
begin
	InputToExtractFrom[17] = 1'b1;
end 
// InputToExtractFrom[ 16 ]
initial
begin
	InputToExtractFrom[16] = 1'b1;
end 
// InputToExtractFrom[ 15 ]
initial
begin
	InputToExtractFrom[15] = 1'b1;
end 
// InputToExtractFrom[ 14 ]
initial
begin
	InputToExtractFrom[14] = 1'b0;
end 
// InputToExtractFrom[ 13 ]
initial
begin
	InputToExtractFrom[13] = 1'b0;
end 
// InputToExtractFrom[ 12 ]
initial
begin
	InputToExtractFrom[12] = 1'b0;
end 
// InputToExtractFrom[ 11 ]
initial
begin
	InputToExtractFrom[11] = 1'b0;
end 
// InputToExtractFrom[ 10 ]
initial
begin
	InputToExtractFrom[10] = 1'b0;
end 
// InputToExtractFrom[ 9 ]
initial
begin
	InputToExtractFrom[9] = 1'b0;
end 
// InputToExtractFrom[ 8 ]
initial
begin
	InputToExtractFrom[8] = 1'b0;
end 
// InputToExtractFrom[ 7 ]
initial
begin
	InputToExtractFrom[7] = 1'b0;
end 
// InputToExtractFrom[ 6 ]
initial
begin
	InputToExtractFrom[6] = 1'b0;
end 
// InputToExtractFrom[ 5 ]
initial
begin
	InputToExtractFrom[5] = 1'b0;
end 
// InputToExtractFrom[ 4 ]
initial
begin
	InputToExtractFrom[4] = 1'b0;
end 
// InputToExtractFrom[ 3 ]
initial
begin
	InputToExtractFrom[3] = 1'b0;
end 
// InputToExtractFrom[ 2 ]
initial
begin
	InputToExtractFrom[2] = 1'b0;
end 
// InputToExtractFrom[ 1 ]
initial
begin
	InputToExtractFrom[1] = 1'b0;
end 
// InputToExtractFrom[ 0 ]
initial
begin
	InputToExtractFrom[0] = 1'b0;
end 
// EndBit[ 7 ]
initial
begin
	EndBit[7] = 1'b0;
end 
// EndBit[ 6 ]
initial
begin
	EndBit[6] = 1'b0;
end 
// EndBit[ 5 ]
initial
begin
	EndBit[5] = 1'b0;
end 
// EndBit[ 4 ]
initial
begin
	EndBit[4] = 1'b0;
	EndBit[4] = #90000 1'b1;
	EndBit[4] = #230000 1'b0;
end 
// EndBit[ 3 ]
initial
begin
	EndBit[3] = 1'b0;
end 
// EndBit[ 2 ]
initial
begin
	EndBit[2] = 1'b0;
	EndBit[2] = #90000 1'b1;
	EndBit[2] = #230000 1'b0;
end 
// EndBit[ 1 ]
initial
begin
	EndBit[1] = 1'b0;
end 
// EndBit[ 0 ]
initial
begin
	EndBit[0] = 1'b0;
	EndBit[0] = #90000 1'b1;
	EndBit[0] = #230000 1'b0;
end 
// StartBit[ 7 ]
initial
begin
	StartBit[7] = 1'b0;
end 
// StartBit[ 6 ]
initial
begin
	StartBit[6] = 1'b0;
end 
// StartBit[ 5 ]
initial
begin
	StartBit[5] = 1'b0;
end 
// StartBit[ 4 ]
initial
begin
	StartBit[4] = 1'b0;
end 
// StartBit[ 3 ]
initial
begin
	StartBit[3] = 1'b0;
	StartBit[3] = #90000 1'b1;
	StartBit[3] = #230000 1'b0;
end 
// StartBit[ 2 ]
initial
begin
	StartBit[2] = 1'b0;
	StartBit[2] = #90000 1'b1;
	StartBit[2] = #230000 1'b0;
end 
// StartBit[ 1 ]
initial
begin
	StartBit[1] = 1'b0;
	StartBit[1] = #90000 1'b1;
	StartBit[1] = #230000 1'b0;
end 
// StartBit[ 0 ]
initial
begin
	StartBit[0] = 1'b0;
end 
endmodule

