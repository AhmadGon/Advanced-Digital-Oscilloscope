// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/11/2020 19:26:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BitShifter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BitShifter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] InputToShift;
reg Main_CLK;
reg Module_Enable;
reg RightLeftShift_Switch;
reg [7:0] ShiftNumber;
// wires                                               
wire [31:0] ShiftedOutput;
wire Valid_Output;

// assign statements (if any)                          
BitShifter i1 (
// port map - connection between master ports and signals/registers   
	.InputToShift(InputToShift),
	.Main_CLK(Main_CLK),
	.Module_Enable(Module_Enable),
	.RightLeftShift_Switch(RightLeftShift_Switch),
	.ShiftNumber(ShiftNumber),
	.ShiftedOutput(ShiftedOutput),
	.Valid_Output(Valid_Output)
);
initial 
begin 
#1000000 $finish;
end 

// Main_CLK
always
begin
	Main_CLK = 1'b0;
	Main_CLK = #5000 1'b1;
	#5000;
end 
// InputToShift[ 7 ]
initial
begin
	InputToShift[7] = 1'b0;
	InputToShift[7] = #260000 1'b1;
	InputToShift[7] = #20000 1'b0;
	InputToShift[7] = #10000 1'b1;
	InputToShift[7] = #20000 1'b0;
	InputToShift[7] = #10000 1'b1;
	InputToShift[7] = #10000 1'b0;
	InputToShift[7] = #10000 1'b1;
	InputToShift[7] = #20000 1'b0;
	InputToShift[7] = #10000 1'b1;
	InputToShift[7] = #10000 1'b0;
	InputToShift[7] = #10000 1'b1;
	InputToShift[7] = #10000 1'b0;
	InputToShift[7] = #20000 1'b1;
	InputToShift[7] = #20000 1'b0;
end 
// InputToShift[ 6 ]
initial
begin
	InputToShift[6] = 1'b0;
	InputToShift[6] = #260000 1'b1;
	InputToShift[6] = #10000 1'b0;
	InputToShift[6] = #10000 1'b1;
	InputToShift[6] = #30000 1'b0;
	InputToShift[6] = #20000 1'b1;
	InputToShift[6] = #10000 1'b0;
	InputToShift[6] = #30000 1'b1;
	InputToShift[6] = #10000 1'b0;
	InputToShift[6] = #30000 1'b1;
	InputToShift[6] = #20000 1'b0;
	InputToShift[6] = #10000 1'b1;
	InputToShift[6] = #20000 1'b0;
end 
// InputToShift[ 5 ]
initial
begin
	InputToShift[5] = 1'b0;
	InputToShift[5] = #260000 1'b1;
	InputToShift[5] = #20000 1'b0;
	InputToShift[5] = #20000 1'b1;
	InputToShift[5] = #40000 1'b0;
	InputToShift[5] = #10000 1'b1;
	InputToShift[5] = #10000 1'b0;
	InputToShift[5] = #20000 1'b1;
	InputToShift[5] = #10000 1'b0;
	InputToShift[5] = #10000 1'b1;
	InputToShift[5] = #10000 1'b0;
	InputToShift[5] = #10000 1'b1;
	InputToShift[5] = #20000 1'b0;
	InputToShift[5] = #20000 1'b1;
	InputToShift[5] = #320000 1'b0;
end 
// InputToShift[ 4 ]
initial
begin
	InputToShift[4] = 1'b0;
	InputToShift[4] = #20000 1'b1;
	InputToShift[4] = #240000 1'b0;
	InputToShift[4] = #20000 1'b1;
	InputToShift[4] = #20000 1'b0;
	InputToShift[4] = #10000 1'b1;
	InputToShift[4] = #100000 1'b0;
	InputToShift[4] = #10000 1'b1;
	InputToShift[4] = #40000 1'b0;
	InputToShift[4] = #320000 1'b1;
end 
// InputToShift[ 3 ]
initial
begin
	InputToShift[3] = 1'b0;
	InputToShift[3] = #300000 1'b1;
	InputToShift[3] = #30000 1'b0;
	InputToShift[3] = #20000 1'b1;
	InputToShift[3] = #20000 1'b0;
	InputToShift[3] = #20000 1'b1;
	InputToShift[3] = #10000 1'b0;
	InputToShift[3] = #20000 1'b1;
	InputToShift[3] = #360000 1'b0;
end 
// InputToShift[ 2 ]
initial
begin
	InputToShift[2] = 1'b0;
	InputToShift[2] = #280000 1'b1;
	InputToShift[2] = #30000 1'b0;
	InputToShift[2] = #10000 1'b1;
	InputToShift[2] = #30000 1'b0;
	InputToShift[2] = #20000 1'b1;
	InputToShift[2] = #20000 1'b0;
	InputToShift[2] = #10000 1'b1;
	InputToShift[2] = #10000 1'b0;
	InputToShift[2] = #10000 1'b1;
	InputToShift[2] = #10000 1'b0;
	InputToShift[2] = #10000 1'b1;
	InputToShift[2] = #340000 1'b0;
end 
// InputToShift[ 1 ]
initial
begin
	InputToShift[1] = 1'b0;
	InputToShift[1] = #280000 1'b1;
	InputToShift[1] = #10000 1'b0;
	InputToShift[1] = #20000 1'b1;
	InputToShift[1] = #10000 1'b0;
	InputToShift[1] = #10000 1'b1;
	InputToShift[1] = #30000 1'b0;
	InputToShift[1] = #50000 1'b1;
	InputToShift[1] = #10000 1'b0;
end 
// InputToShift[ 0 ]
initial
begin
	InputToShift[0] = 1'b0;
	InputToShift[0] = #20000 1'b1;
	InputToShift[0] = #240000 1'b0;
	InputToShift[0] = #10000 1'b1;
	InputToShift[0] = #20000 1'b0;
	InputToShift[0] = #10000 1'b1;
	InputToShift[0] = #10000 1'b0;
	InputToShift[0] = #10000 1'b1;
	InputToShift[0] = #10000 1'b0;
	InputToShift[0] = #10000 1'b1;
	InputToShift[0] = #10000 1'b0;
	InputToShift[0] = #20000 1'b1;
	InputToShift[0] = #20000 1'b0;
	InputToShift[0] = #40000 1'b1;
	InputToShift[0] = #10000 1'b0;
	InputToShift[0] = #20000 1'b1;
end 

// Module_Enable
initial
begin
	Module_Enable = 1'b0;
	Module_Enable = #20000 1'b1;
	Module_Enable = #230000 1'b0;
	Module_Enable = #210000 1'b1;
	Module_Enable = #320000 1'b0;
end 

// RightLeftShift_Switch
initial
begin
	RightLeftShift_Switch = 1'b0;
	RightLeftShift_Switch = #20000 1'b1;
	RightLeftShift_Switch = #230000 1'b0;
end 
// ShiftNumber[ 7 ]
initial
begin
	ShiftNumber[7] = 1'b0;
end 
// ShiftNumber[ 6 ]
initial
begin
	ShiftNumber[6] = 1'b0;
end 
// ShiftNumber[ 5 ]
initial
begin
	ShiftNumber[5] = 1'b0;
end 
// ShiftNumber[ 4 ]
initial
begin
	ShiftNumber[4] = 1'b0;
end 
// ShiftNumber[ 3 ]
initial
begin
	ShiftNumber[3] = 1'b0;
end 
// ShiftNumber[ 2 ]
initial
begin
	ShiftNumber[2] = 1'b0;
	ShiftNumber[2] = #20000 1'b1;
	ShiftNumber[2] = #230000 1'b0;
end 
// ShiftNumber[ 1 ]
initial
begin
	ShiftNumber[1] = 1'b0;
	ShiftNumber[1] = #460000 1'b1;
	ShiftNumber[1] = #320000 1'b0;
end 
// ShiftNumber[ 0 ]
initial
begin
	ShiftNumber[0] = 1'b0;
end 
endmodule

