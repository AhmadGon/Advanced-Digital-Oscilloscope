// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/30/2020 19:51:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          VGA_Controls
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VGA_Controls_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Main_CLK;
reg Reset;
// wires                                               
wire Blank_N;
wire [9:0] H_Pixel;
wire Hsync;
wire Sync_N;
wire VGA_CLK;
wire [9:0] V_Pixel;
wire Vsync;

// assign statements (if any)                          
VGA_Controls i1 (
// port map - connection between master ports and signals/registers   
	.Blank_N(Blank_N),
	.H_Pixel(H_Pixel),
	.Hsync(Hsync),
	.Main_CLK(Main_CLK),
	.Reset(Reset),
	.Sync_N(Sync_N),
	.VGA_CLK(VGA_CLK),
	.V_Pixel(V_Pixel),
	.Vsync(Vsync)
);
initial 
begin 
#10000000 $finish;
end 

// Main_CLK
always
begin
	Main_CLK = 1'b0;
	Main_CLK = #1000 1'b1;
	#1000;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #80000 1'b1;
end 
endmodule

